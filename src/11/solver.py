import math
import os

__location__ = os.path.realpath(
    os.path.join(os.getcwd(), os.path.dirname(__file__)))

from copy import deepcopy


file1 = open(os.path.join(__location__, 'input.txt'))
lines = file1.read()


# Define a class to represent a monkey
class Monkey:
    def __init__(self, monkey_nr):
        self.monkey_nr = monkey_nr
        self.inspected_items = 0
        self.operation_operators = None
        self.test_divisor = None

    def operation(self, x):
        operation = self.operation_operators["op"]
        value = self.operation_operators["value"]
        if value == "old":
            value = x
        else:
            value = int(value)

        if operation == '+':
            return x + value
        elif operation == '-':
            return x - value
        elif operation == '*':
            return x * value
        elif operation == '/':
            return math.floor(x / value)
        else:
            raise Exception(f"could not parse {self.operation_operators}")

    def test(self, x):
        return x % self.test_divisor == 0

    def do_round_part2(self, monkeys):
        print(f"Monkey {self.monkey_nr}")
        for test_item in deepcopy(self.items_divisors):
            self.items_divisors.remove(test_item)
            self.inspected_items += 1
            print(f"  Monkey inspect an item with worry level of {test_item}")
            for divisor in test_item.keys():
                test_item[divisor] = self.operation(test_item[divisor]) % divisor
            print(f"    Worry level is {self.operation_operators} to {test_item}")
            if not self.test(test_item[self.test_divisor]):
                print(f"    Current worry level is not divible by {self.test_divisor}")
                monkeys[self.throw_false].items_divisors += [test_item]
                print(f"    Item with worry level {test_item} is thrown to {self.throw_false}")
            else:
                print(f"    Current worry level is divible by {self.test_divisor}")
                monkeys[self.throw_true].items_divisors += [test_item]
                print(f"    Item with worry level {test_item} is thrown to {self.throw_true}")

    def do_round(self, monkeys):
        print(f"Monkey {self.monkey_nr}")
        for item in deepcopy(self.starting_items):
            test_item = item
            self.inspected_items += 1
            print(f"  Monkey inspect an item with worry level of {test_item}")
            new_worry_level = self.operation(test_item)
            print(f"    Worry level is {self.operation_operators} to {new_worry_level}")
            bored_with_item_level = math.floor(new_worry_level / 3)
            print(f"    Monkey gets bored with item. Worry level is divided by 3 to {bored_with_item_level}.")
            self.starting_items.remove(item)
            if not self.test(bored_with_item_level):
                print(f"    Current worry level is not divible by {self.test_divisor}")
                monkeys[self.throw_false].starting_items += [bored_with_item_level]
                print(f"    Item with worry level {bored_with_item_level} is thrown to {self.throw_false}")
            else:
                print(f"    Current worry level is divible by {self.test_divisor}")
                monkeys[self.throw_true].starting_items += [bored_with_item_level]
                print(f"    Item with worry level {bored_with_item_level} is thrown to {self.throw_true}")


import re


# Parse generated by chatGPT, good starting point with fixing all the regexps..
def parse(text):
    # split the text into individual lines
    lines = text.split('\n')

    # create a dictionary to store the monkey information
    monkeys = {}

    # loop through the lines and extract the information for each monkey
    for line in lines:
        # extract the monkey number
        m = re.search(r'Monkey (\d+):', line)
        if m:
            monkey_num = int(m.group(1))
            monkeys[monkey_num] = Monkey(monkey_num)

        # extract the starting items
        m = re.search(r'Starting items: (\d+(?:, \d+)*)', line)
        if m:
            monkeys[monkey_num].starting_items = [int(i) for i in m.group(1).split(', ')]

        # extract the operation
        m = re.search(r'Operation: new = old (\S+) (\S+)', line)
        if m:
            monkeys[monkey_num].operation_operators = {'op': m.group(1), 'value': m.group(2)}

        # extract the test
        m = re.search(r'Test: divisible by (\d+)', line)
        if m:
            divisor = int(m.group(1))
            monkeys[monkey_num].test_divisor = divisor

        # extract the throw destinations
        m = re.search(r'If true: throw to monkey (\d+)', line)
        if m:
            monkeys[monkey_num].throw_true = int(m.group(1))
        m = re.search(r'If false: throw to monkey (\d+)', line)
        if m:
            monkeys[monkey_num].throw_false = int(m.group(1))

    # return the monkey information
    return monkeys


monkeys = parse(lines)


def do_part1():
    global round, monkeynr
    for round in range(0, 20):
        for monkeynr in monkeys.keys():
            monkeys[monkeynr].do_round(monkeys)
        print(f"After round {round}")
        for monkeynr in monkeys.keys():
            print(f"Monkey {monkeynr}: {monkeys[monkeynr].starting_items} ")
    print(list(map(lambda t: f"{t.monkey_nr}:{t.inspected_items}", monkeys.values())))
    # ['0:290', '1:201', '2:298', '3:60', '4:154', '5:290', '6:303', '7:10']
    print(303 * 298)


# do_part1()

divisors = []
for monkey in monkeys.values():
    divisors += [monkey.test_divisor]
for monkey in monkeys.values():
    moduluslist = []
    for item in monkey.starting_items:
        modulusdict = {}
        for divisor in divisors:
            modulusdict[divisor] = item % divisor
        moduluslist.append(modulusdict)
    monkey.items_divisors = moduluslist
print(monkeys.values())
for round in range(0, 10000):
    for monkeynr in monkeys.keys():
        monkeys[monkeynr].do_round_part2(monkeys)
    print(f"After round {round}")
    for monkeynr in monkeys.keys():
        print(f"Monkey {monkeynr}: {monkeys[monkeynr].starting_items} ")
print(list(map(lambda t: f"{t.monkey_nr}:{t.inspected_items}", monkeys.values())))
# ['0:132214', '1:136847', '2:128314', '3:31222', '4:72311', '5:132779', '6:132782', '7:13026']
